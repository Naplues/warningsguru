import re

from util.KDMFileExtractor import extractfile
from util.SourceFilePathGenerator import OriginalFilePathGenerator
from util.FilePathExtractor import FilePathExtractor


"""
The purpose of this tool is to extract, transform and load the kdm file generated by the toif assimilitator into the
augmented commitguru as individual, toif view tsv compatible format.
"""


def etl_warnings(kdm_file_path, project_root_directory, repo_id, commit_id):

#     warnings = _get_warnings(kdm_file_path=kdm_file_path, project_root_directory=project_root_directory)
#     _save_warnings_in_db(repo_id, commit_id, warnings)
#     pass
#
#
# def _get_warnings(kdm_file_path, project_root_directory, repo):
    toif_components = extractfile(kdm_file_path)

    # Obtain association of static analysers to warnings
    static_analysers = _extract_static_analysers(toif_components)

    warnings = []
    path_generator = FilePathExtractor(toif_components)
    reverse_engineer_path = OriginalFilePathGenerator(project_root_directory)

    # Identify the files
    for component_id in toif_components:
        component = toif_components[component_id]

        if 'type' in component and component['type'] == "toif:Finding":

            code_location_component = toif_components[component['FindingHasCodeLocation']]

            SFP = toif_components.get(component.get('FindingHasSFPIdentifier')).get('name')
            CWE = toif_components.get(component.get('FindingHasCWEIdentifier')).get('name')
            weakness_description = toif_components.get(component.get('FindingIsDescribedByWeaknessDescription')).get('description')
            line_number = code_location_component.get('lineNumber')

            for static_analyser in static_analysers:
                if component_id in static_analyser.get('related'):
                    static_analyser_name = static_analyser.get('name')

            relative_file_path = reverse_engineer_path.transform(path_generator.getPath(code_location_component['CodeLocationReferencesFile']))

            warnings.append({"repo_id": repo_id, "commit_id": commit_id,  "resource": relative_file_path, "SFP": SFP,
                             "CWE": CWE, "description": weakness_description, "line_number": line_number,
                             "generator_tool": static_analyser_name})

    return warnings


def _extract_static_analysers(toif_components):
    static_analysers = []

    for component_id in toif_components:
        component = toif_components[component_id]

        if 'type' in component and component['type'] == 'toif:TOIFSegment':
            name = toif_components[component.get('TOIFSegmentIsProcessedByAdaptor')].get('name')
            static_analysers.append({'name': name, 'related': component.get('children')})

    return static_analysers
